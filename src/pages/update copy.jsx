import Head from "next/head";
import withSession from "~/lib/Session";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import Link from "next/link";
import toast, { Toaster } from "react-hot-toast";
import { PrismaClient } from "@prisma/client";
import { useState } from 'react'; 
import Script from 'next/script'

const prisma = new PrismaClient();


export default function Home({ account }) {

console.log(account.username)
  const [loading, setLoading] = useState(false);
  const router = useRouter();
  
  const deletePost = async postId => {
    try {
      setLoading(true);
      await fetch('/api/delete',{
        method: "DELETE",
        body: JSON.stringify({ postId }),
      });

      setLoading(false);
      await router.push("/");
    } catch (error) {
      console.log("error", error);
      setLoading(false);
    }

  }
 


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
       
      </Head>
      <Toaster position="top-center" reverseOrder={true} />
        <section className="vh-100 gradient-custom">
        <div className="updateContainer justify-content-center">
            <div className="row d-flex justify-content-center align-items-center h-100">
              <div className="col-12 col-md-8 col-lg-6 col-xl-5">
                <div
                  className="card bg-dark text-white wrapper"
                  style={{ marginRight: 1 + "rem" }}
                >
                   <div className="card-body p-5 text-center box">
               
                    <div className="mb-md-5 mt-md-4 pb-5">
                   
                      <form action="/api/update" method="post"
                        className="flex flex-col w-full space-y-3"
                        
                      >
                      <div className="form-outline form-white mb-4">
                        <label for="name" className="form-label">
                         Username
                       
                         </label>
                        <input
                          className="form-control form-control-lg"
                            type="text"
                            name="username"
                            id="username"
                            placeholder="Username"
                           
                          />
                        
                        </div>
                        <div className="form-outline form-white mb-4">
                        <label for="name" className="form-label">
                         Password
                        </label>
                        <input
                          className="form-control form-control-lg"
                            type="password"
                            name="password"
                            id="password"
                            placeholder="Password"
                           
                          />
                        
                        </div>
                        <button type="submt" className="w-full px-5 py-3 border border-300 focus:outline-none" >Logout</button>
  
                      </form>
                    </div>
                  </div>
             
                </div>
              </div>
            </div>
          </div>
        </section>
      
      
        <form action="/api/update" method="post">

  <label for="password">password:</label>
  <input type="text" id="password" name="password" />
  
</form>
    </>
  );
}
export const getServerSideProps = withSession(async function ({ req, res }) {
  //check the user session
  
  const user = req.session.get('user')
  console.log(user.username)
  if (!user) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    }
  }
//update password
 


  //get the user from the database
  const account = await prisma.user.findFirst({
    where: {
      username: req.session.get('user').username
    }
  })


  return {
    props: {
      account
    }
  }
})